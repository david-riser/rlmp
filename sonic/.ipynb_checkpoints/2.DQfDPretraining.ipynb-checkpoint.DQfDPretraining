{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DQfD: Pretraining Phase\n",
    "In this notebook the Deep Q-learning From Demonstrations (DQfD) pre-training phase is developed and applied to the Sonic the Hedgehog game."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gym\n",
    "import imageio\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import os\n",
    "import retro\n",
    "import sys\n",
    "import time\n",
    "\n",
    "from gym import wrappers\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "project_dir = os.path.abspath('.')\n",
    "sys.path.append(os.path.join(project_dir, 'sonic'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sonic import utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This notebook has access to 4 CPUs.\n"
     ]
    }
   ],
   "source": [
    "n_cpu = os.cpu_count()\n",
    "print(f\"This notebook has access to {n_cpu} CPUs.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = {}\n",
    "config['data_path'] = os.path.abspath(\"./data/human\")\n",
    "config['level'] = 'GreenHillZone.Act1'\n",
    "config['epochs'] = 150\n",
    "config['batches_per_epoch'] = 10\n",
    "config['batch_size'] = 32\n",
    "config['n_steps'] = 10\n",
    "config['coef1'] = 1.\n",
    "config['coef2'] = 1.\n",
    "config['coef3'] = 0.\n",
    "config['margin'] = 0.8\n",
    "config['gamma'] = 0.99\n",
    "config['update_freq'] = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "states, actions, next_states, rewards, dones = utils.extract_human_data(f\"data/human/SonicTheHedgehog-Genesis-{config['level']}-0000.bk2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 0 0 0 0 0 0 1 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0 0 0 0]\n",
      " [0 1 0 0 0 0 0 1 0 0 0 0]\n",
      " [0 0 0 0 0 0 1 0 0 0 0 0]\n",
      " [0 0 0 0 1 0 1 0 0 0 0 0]\n",
      " [0 1 0 0 0 0 0 0 0 0 0 0]\n",
      " [0 1 0 0 0 0 1 0 0 0 0 0]\n",
      " [0 0 0 0 0 1 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 1 1 0 0 0 0 0]\n",
      " [0 0 0 0 0 1 0 1 0 0 0 0]\n",
      " [0 1 0 0 1 0 0 1 0 0 0 0]\n",
      " [0 0 0 0 1 0 0 0 0 0 0 0]] [1841  881  224  139   38   21   18   16    5    4    3    1]\n"
     ]
    }
   ],
   "source": [
    "unique_actions, counts = np.unique(actions, axis=0, return_counts=True)\n",
    "\n",
    "ordering = np.argsort(counts)[::-1]\n",
    "unique_actions = unique_actions[ordering]\n",
    "counts = counts[ordering]\n",
    "print(unique_actions, counts)\n",
    "\n",
    "n_actions = len(unique_actions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Identified 12 unique actions of 4096 possible.\n"
     ]
    }
   ],
   "source": [
    "print(f\"Identified {len(counts)} unique actions of {2**12} possible.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.autograd as autograd \n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def torch_td_loss(online_model, target_model, states, actions, \n",
    "                  next_states, rewards, dones, gamma=0.99):\n",
    "    \"\"\" Compute the TD-error using pytorch for a set of transitions. \"\"\"\n",
    "    \n",
    "    # Predict the value of the current and next state using the \n",
    "    # online and target networks respectively. \n",
    "    q_values = online_model(states)\n",
    "    next_q_values = target_model(next_states)\n",
    "    \n",
    "    # Mask those states for which the next state is terminal.\n",
    "    q_values = q_values.gather(1, actions.view(-1,1)).squeeze(1)\n",
    "    next_q_values = next_q_values.max(1).values\n",
    "\n",
    "    qhat = (rewards + gamma * next_q_values * (1 - dones))\n",
    "    loss = (q_values - qhat.detach()).pow(2)\n",
    "    loss = loss.mean()\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def torch_margin_loss(q_values, expert_actions, margin):\n",
    "    \"\"\" Margin loss in torch. \"\"\"\n",
    "    \n",
    "    # Calculate the margins and set them to zero where\n",
    "    # expert has chosen action. \n",
    "    margins = torch.ones_like(q_values) * margin\n",
    "    margins[:, expert_actions] = 0.\n",
    "    \n",
    "    loss_term1 = torch.max(q_values + margins, axis=1)[0]\n",
    "    loss_term2 = torch.take(q_values, expert_actions)\n",
    "    \n",
    "    return loss_term1 - loss_term2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def torch_nstep_td_loss(online_model, target_model, actions, states, nth_states, \n",
    "                        discounted_rewards, dones, n, gamma):\n",
    "    \"\"\" Calculate the n-step TD-loss using pytorch.  We assume that the discounted sum over\n",
    "        rewards up to the n-th state has already been performed.  \n",
    "    \"\"\"\n",
    "    \n",
    "    # Predict the value of the current and next state using the \n",
    "    # online and target networks respectively. \n",
    "    q_values = online_model(states)\n",
    "    nth_q_values = target_model(nth_states)\n",
    "    \n",
    "    # Mask those states for which the next state is terminal.\n",
    "    q_values = q_values.gather(1, actions.view(-1,1)).squeeze(1)\n",
    "    nth_q_values = nth_q_values.max(1).values\n",
    "\n",
    "    qhat = (discounted_rewards + gamma**n * nth_q_values * (1 - dones))\n",
    "    loss = (q_values - qhat.detach()).pow(2)\n",
    "    loss = loss.mean()\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def torch_l2_penalty(parameters):\n",
    "    \n",
    "    loss = 0.\n",
    "    for p in parameters:\n",
    "        loss += torch.sum(p ** 2)\n",
    "        \n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def torch_dqfd_loss(online_model, target_model, states, next_states, nth_states, \n",
    "                    rewards, discounted_rewards, dones, gamma, n, coef1, coef2, coef3,\n",
    "                    margin, expert_actions\n",
    "                   ):\n",
    "    \"\"\" Construct the full DQfD loss from the four component loss functions.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Predict which action to take from the online network.\n",
    "    q_values = online_model(states)\n",
    "    actions = torch.argmax(q_values, axis=1)\n",
    "    \n",
    "    td_loss = torch_td_loss(\n",
    "        online_model=online_model, \n",
    "        target_model=target_model, \n",
    "        actions=actions, states=states, \n",
    "        next_states=next_states, rewards=rewards, \n",
    "        dones=dones, gamma=gamma)\n",
    "    \n",
    "    ntd_loss = torch_nstep_td_loss(\n",
    "        online_model=online_model, target_model=target_model, \n",
    "        actions=actions, states=states, \n",
    "        nth_states=nth_states, \n",
    "        discounted_rewards=discounted_rewards, \n",
    "        dones=dones, gamma=gamma, n=n)\n",
    "    \n",
    "    q_values = online_model(states)\n",
    "    margin_loss = torch_margin_loss(q_values, expert_actions, margin)\n",
    "    margin_loss = torch.mean(margin_loss)\n",
    "    l2_loss = torch_l2_penalty(online_model.parameters())\n",
    "    \n",
    "    loss = td_loss + coef1 * ntd_loss + coef2 * margin_loss + coef3 * l2_loss\n",
    "    \n",
    "    return loss, td_loss, ntd_loss * coef1, margin_loss * coef2, l2_loss * coef3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "encoding = {}\n",
    "\n",
    "for i, action in enumerate(unique_actions):\n",
    "    encoding[tuple(action)] = i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: (0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0), 1: (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 2: (0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0), 3: (0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0), 4: (0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0), 5: (0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 6: (0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0), 7: (0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0), 8: (0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0), 9: (0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0), 10: (0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0), 11: (0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0)}\n"
     ]
    }
   ],
   "source": [
    "decoding = { value:key for key, value in encoding.items() }\n",
    "print(decoding)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SonicNet(nn.Module):\n",
    "    \"\"\" A simple deep q-network architecture to be used for predicing \n",
    "        action-values from states.\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, input_shape, output_shape):\n",
    "        super(SonicNet, self).__init__()\n",
    "        self.input_shape = input_shape\n",
    "        self.output_shape = output_shape\n",
    "        \n",
    "        channels, height, width = self.input_shape\n",
    "        self.features = nn.Sequential(\n",
    "            nn.Conv2d(channels, 16, kernel_size=3, stride=1),\n",
    "            nn.ReLU(),\n",
    "            nn.Conv2d(16, 16, kernel_size=3, stride=3),\n",
    "            nn.ReLU(),\n",
    "            nn.Conv2d(16, 16, kernel_size=3, stride=1),\n",
    "            nn.ReLU(),\n",
    "            nn.Conv2d(16, 16, kernel_size=3, stride=3),\n",
    "            nn.Conv2d(16, 16, kernel_size=3, stride=1),\n",
    "            nn.ReLU(),\n",
    "            nn.Conv2d(16, 16, kernel_size=3, stride=3),\n",
    "            nn.ReLU()\n",
    "        )\n",
    "        \n",
    "        self.value = nn.Sequential(\n",
    "            nn.Linear(self._feature_size(), 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(128, 1)\n",
    "        )\n",
    "        \n",
    "        self.advantage = nn.Sequential(\n",
    "            nn.Linear(self._feature_size(), 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(128, self.output_shape)\n",
    "        )\n",
    "        \n",
    "    def _feature_size(self):\n",
    "        \"\"\" I took this from somewhere. \"\"\"\n",
    "        return self.features(autograd.Variable(torch.zeros(1, *self.input_shape))).view(1, -1).size(1)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = self.features(x)\n",
    "        x = x.view(x.size(0), -1)\n",
    "        value = self.value(x)\n",
    "        advantage = self.advantage(x)\n",
    "        return value + advantage - advantage.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "online_model, target_model = SonicNet(states[0].shape, n_actions), SonicNet(states[0].shape, n_actions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "states, actions, next_states, rewards, dones = utils.extract_human_data(f\"data/human/SonicTheHedgehog-Genesis-{config['level']}-0000.bk2\")\n",
    "_states, _actions, _next_states, _nth_states, _rewards, _discounted_rewards, _dones = utils.build_nstep_transitions(\n",
    "    states, actions, next_states, rewards, dones, n=config['n_steps'], gamma=0.99)\n",
    "_actions = utils.encode_actions(_actions, encoding)\n",
    "\n",
    "_states = np.array(_states)\n",
    "_actions = np.array(_actions)\n",
    "_next_states = np.array(_next_states)\n",
    "_nth_states = np.array(_nth_states)\n",
    "_rewards = np.array(_rewards)\n",
    "_discounted_rewards = np.array(_discounted_rewards)\n",
    "_dones = np.array(_dones)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "online_model = online_model.to(device='cuda:0')\n",
    "target_model = target_model.to(device='cuda:0')\n",
    "target_model.load_state_dict(online_model.state_dict())\n",
    "optimizer = optim.Adam(online_model.parameters(), lr=1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0, Loss 83.3277, TD-Loss 0.0333, NTD-Loss 82.4502, Margin Loss 0.8442, L2 Loss 0.0000\n",
      "Epoch 1, Loss 201.0690, TD-Loss 31.4592, NTD-Loss 168.9857, Margin Loss 0.6241, L2 Loss 0.0000\n",
      "Epoch 2, Loss 86.1174, TD-Loss 0.4799, NTD-Loss 85.1493, Margin Loss 0.4882, L2 Loss 0.0000\n",
      "Epoch 3, Loss 86.5202, TD-Loss 0.2090, NTD-Loss 85.8825, Margin Loss 0.4288, L2 Loss 0.0000\n",
      "Epoch 4, Loss 167.9804, TD-Loss 0.1953, NTD-Loss 167.4372, Margin Loss 0.3479, L2 Loss 0.0000\n",
      "Epoch 5, Loss 172.2370, TD-Loss 1.3824, NTD-Loss 170.5774, Margin Loss 0.2772, L2 Loss 0.0000\n",
      "Epoch 6, Loss 139.7715, TD-Loss 1.1409, NTD-Loss 138.4258, Margin Loss 0.2048, L2 Loss 0.0000\n",
      "Epoch 7, Loss 145.3508, TD-Loss 31.1751, NTD-Loss 113.9313, Margin Loss 0.2444, L2 Loss 0.0000\n",
      "Epoch 8, Loss 112.4097, TD-Loss 0.3750, NTD-Loss 111.6809, Margin Loss 0.3538, L2 Loss 0.0000\n",
      "Epoch 9, Loss 112.8267, TD-Loss 0.5213, NTD-Loss 111.9053, Margin Loss 0.4001, L2 Loss 0.0000\n",
      "Epoch 10, Loss 86.2394, TD-Loss 0.0582, NTD-Loss 85.8123, Margin Loss 0.3689, L2 Loss 0.0000\n",
      "Epoch 11, Loss 228.4291, TD-Loss 31.1200, NTD-Loss 197.0997, Margin Loss 0.2094, L2 Loss 0.0000\n",
      "Epoch 12, Loss 109.9002, TD-Loss 0.6363, NTD-Loss 108.8554, Margin Loss 0.4085, L2 Loss 0.0000\n",
      "Epoch 13, Loss 58.7365, TD-Loss 0.4798, NTD-Loss 57.8413, Margin Loss 0.4154, L2 Loss 0.0000\n",
      "Epoch 14, Loss 229.9115, TD-Loss 60.8800, NTD-Loss 168.5396, Margin Loss 0.4919, L2 Loss 0.0000\n",
      "Epoch 15, Loss 82.0422, TD-Loss 1.6834, NTD-Loss 80.4028, Margin Loss -0.0439, L2 Loss 0.0000\n",
      "Epoch 16, Loss 56.6055, TD-Loss 0.4667, NTD-Loss 55.5320, Margin Loss 0.6068, L2 Loss 0.0000\n",
      "Epoch 17, Loss 218.8924, TD-Loss 30.3203, NTD-Loss 188.6893, Margin Loss -0.1172, L2 Loss 0.0000\n",
      "Epoch 18, Loss 59.0951, TD-Loss 2.8314, NTD-Loss 56.1246, Margin Loss 0.1390, L2 Loss 0.0000\n",
      "Epoch 19, Loss 81.2249, TD-Loss 1.0004, NTD-Loss 79.5925, Margin Loss 0.6321, L2 Loss 0.0000\n",
      "Epoch 20, Loss 270.2602, TD-Loss 2.1500, NTD-Loss 267.1403, Margin Loss 0.9700, L2 Loss 0.0000\n",
      "Epoch 21, Loss 239.1752, TD-Loss 30.0444, NTD-Loss 208.6551, Margin Loss 0.4757, L2 Loss 0.0000\n",
      "Epoch 22, Loss 171.3979, TD-Loss 32.8494, NTD-Loss 137.4596, Margin Loss 1.0889, L2 Loss 0.0000\n",
      "Epoch 23, Loss 55.0646, TD-Loss 3.1712, NTD-Loss 51.1106, Margin Loss 0.7827, L2 Loss 0.0000\n",
      "Epoch 24, Loss 131.9288, TD-Loss 1.8943, NTD-Loss 128.5377, Margin Loss 1.4968, L2 Loss 0.0000\n",
      "Epoch 25, Loss 152.8655, TD-Loss 3.4202, NTD-Loss 150.0282, Margin Loss -0.5828, L2 Loss 0.0000\n",
      "Epoch 26, Loss 99.2826, TD-Loss 3.3282, NTD-Loss 95.1919, Margin Loss 0.7624, L2 Loss 0.0000\n",
      "Epoch 27, Loss 206.7612, TD-Loss 56.5422, NTD-Loss 148.0792, Margin Loss 2.1399, L2 Loss 0.0000\n",
      "Epoch 28, Loss 57.4751, TD-Loss 6.3035, NTD-Loss 50.9358, Margin Loss 0.2359, L2 Loss 0.0000\n",
      "Epoch 29, Loss 169.5539, TD-Loss 36.3612, NTD-Loss 133.9776, Margin Loss -0.7849, L2 Loss 0.0000\n",
      "Epoch 30, Loss 121.8181, TD-Loss 34.1798, NTD-Loss 86.3617, Margin Loss 1.2765, L2 Loss 0.0000\n",
      "Epoch 31, Loss 151.0888, TD-Loss 31.7716, NTD-Loss 118.6034, Margin Loss 0.7138, L2 Loss 0.0000\n",
      "Epoch 32, Loss 186.1186, TD-Loss 28.9358, NTD-Loss 157.0458, Margin Loss 0.1371, L2 Loss 0.0000\n",
      "Epoch 33, Loss 117.0580, TD-Loss 32.3473, NTD-Loss 80.7170, Margin Loss 3.9938, L2 Loss 0.0000\n",
      "Epoch 34, Loss 90.9110, TD-Loss 34.5802, NTD-Loss 53.3112, Margin Loss 3.0197, L2 Loss 0.0000\n",
      "Epoch 35, Loss 113.9796, TD-Loss 4.4672, NTD-Loss 103.6142, Margin Loss 5.8981, L2 Loss 0.0000\n",
      "Epoch 36, Loss 110.9579, TD-Loss 6.4391, NTD-Loss 99.6252, Margin Loss 4.8936, L2 Loss 0.0000\n",
      "Epoch 37, Loss 120.1535, TD-Loss 30.4952, NTD-Loss 84.7474, Margin Loss 4.9110, L2 Loss 0.0000\n",
      "Epoch 38, Loss 133.9370, TD-Loss 21.4219, NTD-Loss 107.3943, Margin Loss 5.1209, L2 Loss 0.0000\n",
      "Epoch 39, Loss 152.1066, TD-Loss 40.9640, NTD-Loss 101.0941, Margin Loss 10.0486, L2 Loss 0.0000\n",
      "Epoch 40, Loss 75.1006, TD-Loss 5.5260, NTD-Loss 67.2897, Margin Loss 2.2848, L2 Loss 0.0000\n",
      "Epoch 41, Loss 108.8896, TD-Loss 8.2860, NTD-Loss 96.8749, Margin Loss 3.7287, L2 Loss 0.0000\n",
      "Epoch 42, Loss 66.0359, TD-Loss 6.3023, NTD-Loss 54.8813, Margin Loss 4.8522, L2 Loss 0.0000\n",
      "Epoch 43, Loss 119.2099, TD-Loss 35.9363, NTD-Loss 79.0691, Margin Loss 4.2045, L2 Loss 0.0000\n",
      "Epoch 44, Loss 98.3152, TD-Loss 36.6019, NTD-Loss 62.5119, Margin Loss -0.7986, L2 Loss 0.0000\n",
      "Epoch 45, Loss 80.7191, TD-Loss 10.9027, NTD-Loss 61.0183, Margin Loss 8.7981, L2 Loss 0.0000\n",
      "Epoch 46, Loss 107.9380, TD-Loss 9.2646, NTD-Loss 90.9113, Margin Loss 7.7620, L2 Loss 0.0000\n",
      "Epoch 47, Loss 70.0471, TD-Loss 8.0014, NTD-Loss 54.2666, Margin Loss 7.7792, L2 Loss 0.0000\n",
      "Epoch 48, Loss 89.7440, TD-Loss 11.7957, NTD-Loss 72.9136, Margin Loss 5.0347, L2 Loss 0.0000\n",
      "Epoch 49, Loss 51.2592, TD-Loss 9.0880, NTD-Loss 33.2963, Margin Loss 8.8748, L2 Loss 0.0000\n",
      "Epoch 50, Loss 65.2434, TD-Loss 6.9504, NTD-Loss 53.3606, Margin Loss 4.9323, L2 Loss 0.0000\n",
      "Epoch 51, Loss 89.2178, TD-Loss 11.5545, NTD-Loss 68.1603, Margin Loss 9.5030, L2 Loss 0.0000\n",
      "Epoch 52, Loss 41.6516, TD-Loss 4.9136, NTD-Loss 26.4051, Margin Loss 10.3329, L2 Loss 0.0000\n",
      "Epoch 53, Loss 96.9743, TD-Loss 17.4798, NTD-Loss 68.1842, Margin Loss 11.3104, L2 Loss 0.0000\n",
      "Epoch 54, Loss 63.1615, TD-Loss 11.2100, NTD-Loss 43.0290, Margin Loss 8.9225, L2 Loss 0.0000\n",
      "Epoch 55, Loss 84.4747, TD-Loss 11.0992, NTD-Loss 61.6864, Margin Loss 11.6891, L2 Loss 0.0000\n",
      "Epoch 56, Loss 92.6406, TD-Loss 32.1145, NTD-Loss 56.2810, Margin Loss 4.2450, L2 Loss 0.0000\n",
      "Epoch 57, Loss 149.7381, TD-Loss 77.1146, NTD-Loss 65.2861, Margin Loss 7.3374, L2 Loss 0.0000\n",
      "Epoch 58, Loss 80.5984, TD-Loss 20.8146, NTD-Loss 51.1363, Margin Loss 8.6475, L2 Loss 0.0000\n",
      "Epoch 59, Loss 73.9549, TD-Loss 24.7828, NTD-Loss 37.5857, Margin Loss 11.5865, L2 Loss 0.0000\n",
      "Epoch 60, Loss 80.7420, TD-Loss 30.7216, NTD-Loss 45.0775, Margin Loss 4.9429, L2 Loss 0.0000\n",
      "Epoch 61, Loss 91.3928, TD-Loss 17.0268, NTD-Loss 62.2633, Margin Loss 12.1027, L2 Loss 0.0000\n",
      "Epoch 62, Loss 71.9046, TD-Loss 8.3957, NTD-Loss 52.4460, Margin Loss 11.0629, L2 Loss 0.0000\n",
      "Epoch 63, Loss 109.0594, TD-Loss 40.9038, NTD-Loss 60.3172, Margin Loss 7.8384, L2 Loss 0.0000\n",
      "Epoch 64, Loss 70.8750, TD-Loss 10.9208, NTD-Loss 46.3518, Margin Loss 13.6024, L2 Loss 0.0000\n",
      "Epoch 65, Loss 109.3789, TD-Loss 29.1407, NTD-Loss 70.6553, Margin Loss 9.5830, L2 Loss 0.0000\n",
      "Epoch 66, Loss 91.3654, TD-Loss 23.1588, NTD-Loss 60.2329, Margin Loss 7.9736, L2 Loss 0.0000\n",
      "Epoch 67, Loss 75.8529, TD-Loss 36.3476, NTD-Loss 34.9609, Margin Loss 4.5444, L2 Loss 0.0000\n",
      "Epoch 68, Loss 46.2627, TD-Loss 11.8057, NTD-Loss 20.0028, Margin Loss 14.4542, L2 Loss 0.0000\n",
      "Epoch 69, Loss 67.3045, TD-Loss 11.4181, NTD-Loss 46.5869, Margin Loss 9.2994, L2 Loss 0.0000\n",
      "Epoch 70, Loss 85.1435, TD-Loss 8.6906, NTD-Loss 64.5596, Margin Loss 11.8933, L2 Loss 0.0000\n",
      "Epoch 71, Loss 77.2393, TD-Loss 18.0092, NTD-Loss 50.1931, Margin Loss 9.0371, L2 Loss 0.0000\n",
      "Epoch 72, Loss 66.1515, TD-Loss 11.3949, NTD-Loss 53.0448, Margin Loss 1.7119, L2 Loss 0.0000\n",
      "Epoch 73, Loss 47.4873, TD-Loss 13.4541, NTD-Loss 31.2494, Margin Loss 2.7838, L2 Loss 0.0000\n",
      "Epoch 74, Loss 57.7705, TD-Loss 8.4268, NTD-Loss 41.4435, Margin Loss 7.9002, L2 Loss 0.0000\n",
      "Epoch 75, Loss 128.9436, TD-Loss 52.2540, NTD-Loss 68.2714, Margin Loss 8.4183, L2 Loss 0.0000\n",
      "Epoch 76, Loss 52.9516, TD-Loss 13.6246, NTD-Loss 32.5833, Margin Loss 6.7437, L2 Loss 0.0000\n",
      "Epoch 77, Loss 55.8992, TD-Loss 9.4453, NTD-Loss 32.6455, Margin Loss 13.8085, L2 Loss 0.0000\n",
      "Epoch 78, Loss 71.8347, TD-Loss 13.0772, NTD-Loss 51.4140, Margin Loss 7.3435, L2 Loss 0.0000\n",
      "Epoch 79, Loss 54.1581, TD-Loss 8.1758, NTD-Loss 41.3435, Margin Loss 4.6388, L2 Loss 0.0000\n",
      "Epoch 80, Loss 47.5057, TD-Loss 4.9149, NTD-Loss 31.2009, Margin Loss 11.3899, L2 Loss 0.0000\n",
      "Epoch 81, Loss 91.7518, TD-Loss 39.7693, NTD-Loss 49.0978, Margin Loss 2.8847, L2 Loss 0.0000\n",
      "Epoch 82, Loss 106.4162, TD-Loss 31.7237, NTD-Loss 57.9296, Margin Loss 16.7629, L2 Loss 0.0000\n",
      "Epoch 83, Loss 48.9255, TD-Loss 9.4250, NTD-Loss 20.8502, Margin Loss 18.6503, L2 Loss 0.0000\n",
      "Epoch 84, Loss 73.9159, TD-Loss 40.0911, NTD-Loss 25.1505, Margin Loss 8.6743, L2 Loss 0.0000\n",
      "Epoch 85, Loss 39.3137, TD-Loss 9.7569, NTD-Loss 27.2500, Margin Loss 2.3069, L2 Loss 0.0000\n",
      "Epoch 86, Loss 50.0545, TD-Loss 9.3433, NTD-Loss 29.0233, Margin Loss 11.6879, L2 Loss 0.0000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 87, Loss 29.5021, TD-Loss 6.2505, NTD-Loss 14.2020, Margin Loss 9.0496, L2 Loss 0.0000\n",
      "Epoch 88, Loss 61.4851, TD-Loss 19.8145, NTD-Loss 35.6099, Margin Loss 6.0608, L2 Loss 0.0000\n",
      "Epoch 89, Loss 43.9049, TD-Loss 9.6496, NTD-Loss 20.4946, Margin Loss 13.7607, L2 Loss 0.0000\n",
      "Epoch 90, Loss 35.6418, TD-Loss 4.7801, NTD-Loss 28.6982, Margin Loss 2.1635, L2 Loss 0.0000\n",
      "Epoch 91, Loss 87.1505, TD-Loss 55.1871, NTD-Loss 33.8786, Margin Loss -1.9152, L2 Loss 0.0000\n",
      "Epoch 92, Loss 97.2408, TD-Loss 39.6536, NTD-Loss 39.8581, Margin Loss 17.7291, L2 Loss 0.0000\n",
      "Epoch 93, Loss 71.6961, TD-Loss 17.2986, NTD-Loss 38.0822, Margin Loss 16.3153, L2 Loss 0.0000\n",
      "Epoch 94, Loss 45.1929, TD-Loss 11.4137, NTD-Loss 20.2008, Margin Loss 13.5784, L2 Loss 0.0000\n",
      "Epoch 95, Loss 48.8149, TD-Loss 14.4013, NTD-Loss 37.1678, Margin Loss -2.7542, L2 Loss 0.0000\n",
      "Epoch 96, Loss 51.4339, TD-Loss 14.6914, NTD-Loss 23.4586, Margin Loss 13.2839, L2 Loss 0.0000\n",
      "Epoch 97, Loss 39.4485, TD-Loss 12.0908, NTD-Loss 23.3568, Margin Loss 4.0009, L2 Loss 0.0000\n",
      "Epoch 98, Loss 47.1259, TD-Loss 6.1415, NTD-Loss 33.0633, Margin Loss 7.9211, L2 Loss 0.0000\n",
      "Epoch 99, Loss 55.9354, TD-Loss 23.6028, NTD-Loss 26.6800, Margin Loss 5.6525, L2 Loss 0.0000\n",
      "Epoch 100, Loss 59.5854, TD-Loss 14.2054, NTD-Loss 32.1809, Margin Loss 13.1990, L2 Loss 0.0000\n",
      "Epoch 101, Loss 56.8563, TD-Loss 13.8237, NTD-Loss 28.7659, Margin Loss 14.2668, L2 Loss 0.0000\n",
      "Epoch 102, Loss 39.7575, TD-Loss 7.6087, NTD-Loss 19.4804, Margin Loss 12.6685, L2 Loss 0.0000\n",
      "Epoch 103, Loss 45.8722, TD-Loss 10.3723, NTD-Loss 34.1596, Margin Loss 1.3403, L2 Loss 0.0000\n",
      "Epoch 104, Loss 36.4731, TD-Loss 10.5202, NTD-Loss 20.2367, Margin Loss 5.7162, L2 Loss 0.0000\n",
      "Epoch 105, Loss 69.1186, TD-Loss 11.3592, NTD-Loss 44.4914, Margin Loss 13.2680, L2 Loss 0.0000\n",
      "Epoch 106, Loss 49.3041, TD-Loss 18.6772, NTD-Loss 21.3562, Margin Loss 9.2706, L2 Loss 0.0000\n",
      "Epoch 107, Loss 44.6806, TD-Loss 10.4933, NTD-Loss 25.2157, Margin Loss 8.9716, L2 Loss 0.0000\n",
      "Epoch 108, Loss 39.7299, TD-Loss 9.3062, NTD-Loss 25.0263, Margin Loss 5.3974, L2 Loss 0.0000\n",
      "Epoch 109, Loss 38.7785, TD-Loss 10.5252, NTD-Loss 21.6525, Margin Loss 6.6008, L2 Loss 0.0000\n",
      "Epoch 110, Loss 66.6505, TD-Loss 20.0927, NTD-Loss 35.8959, Margin Loss 10.6619, L2 Loss 0.0000\n",
      "Epoch 111, Loss 66.4051, TD-Loss 22.0207, NTD-Loss 32.6231, Margin Loss 11.7613, L2 Loss 0.0000\n",
      "Epoch 112, Loss 60.9132, TD-Loss 16.2212, NTD-Loss 37.5593, Margin Loss 7.1327, L2 Loss 0.0000\n",
      "Epoch 113, Loss 63.8629, TD-Loss 25.1169, NTD-Loss 34.7221, Margin Loss 4.0239, L2 Loss 0.0000\n",
      "Epoch 114, Loss 73.4192, TD-Loss 21.7757, NTD-Loss 40.7584, Margin Loss 10.8851, L2 Loss 0.0000\n",
      "Epoch 115, Loss 38.5919, TD-Loss 11.9046, NTD-Loss 25.7170, Margin Loss 0.9703, L2 Loss 0.0000\n",
      "Epoch 116, Loss 41.5547, TD-Loss 9.9202, NTD-Loss 22.0564, Margin Loss 9.5781, L2 Loss 0.0000\n",
      "Epoch 117, Loss 57.0021, TD-Loss 20.0886, NTD-Loss 27.8287, Margin Loss 9.0848, L2 Loss 0.0000\n",
      "Epoch 118, Loss 39.8333, TD-Loss 9.8347, NTD-Loss 25.1126, Margin Loss 4.8860, L2 Loss 0.0000\n",
      "Epoch 119, Loss 41.2715, TD-Loss 7.9345, NTD-Loss 22.0845, Margin Loss 11.2525, L2 Loss 0.0000\n",
      "Epoch 120, Loss 72.3174, TD-Loss 36.0912, NTD-Loss 31.8078, Margin Loss 4.4184, L2 Loss 0.0000\n",
      "Epoch 121, Loss 60.2289, TD-Loss 12.5222, NTD-Loss 37.5479, Margin Loss 10.1588, L2 Loss 0.0000\n",
      "Epoch 122, Loss 60.9134, TD-Loss 9.9863, NTD-Loss 33.3564, Margin Loss 17.5707, L2 Loss 0.0000\n",
      "Epoch 123, Loss 73.6293, TD-Loss 34.9482, NTD-Loss 43.0116, Margin Loss -4.3305, L2 Loss 0.0000\n",
      "Epoch 124, Loss 59.9466, TD-Loss 13.0340, NTD-Loss 27.4784, Margin Loss 19.4342, L2 Loss 0.0000\n",
      "Epoch 125, Loss 63.0874, TD-Loss 17.4346, NTD-Loss 43.3782, Margin Loss 2.2746, L2 Loss 0.0000\n",
      "Epoch 126, Loss 55.8551, TD-Loss 14.6384, NTD-Loss 27.7166, Margin Loss 13.5000, L2 Loss 0.0000\n",
      "Epoch 127, Loss 38.9555, TD-Loss 13.3719, NTD-Loss 25.1732, Margin Loss 0.4104, L2 Loss 0.0000\n",
      "Epoch 128, Loss 73.8301, TD-Loss 17.5492, NTD-Loss 40.1163, Margin Loss 16.1646, L2 Loss 0.0000\n",
      "Epoch 129, Loss 19.7044, TD-Loss 10.8827, NTD-Loss 14.8544, Margin Loss -6.0327, L2 Loss 0.0000\n",
      "Epoch 130, Loss 59.6300, TD-Loss 8.0938, NTD-Loss 36.1474, Margin Loss 15.3888, L2 Loss 0.0000\n",
      "Epoch 131, Loss 85.0119, TD-Loss 41.7291, NTD-Loss 39.1312, Margin Loss 4.1517, L2 Loss 0.0000\n",
      "Epoch 132, Loss 83.3962, TD-Loss 36.1933, NTD-Loss 31.1281, Margin Loss 16.0748, L2 Loss 0.0000\n",
      "Epoch 133, Loss 64.8668, TD-Loss 13.8751, NTD-Loss 35.5249, Margin Loss 15.4668, L2 Loss 0.0000\n",
      "Epoch 134, Loss 36.9273, TD-Loss 7.0419, NTD-Loss 16.4132, Margin Loss 13.4723, L2 Loss 0.0000\n",
      "Epoch 135, Loss 34.4218, TD-Loss 7.4543, NTD-Loss 23.0017, Margin Loss 3.9659, L2 Loss 0.0000\n",
      "Epoch 136, Loss 61.0552, TD-Loss 16.1240, NTD-Loss 31.0426, Margin Loss 13.8886, L2 Loss 0.0000\n",
      "Epoch 137, Loss 47.4269, TD-Loss 13.0266, NTD-Loss 21.4706, Margin Loss 12.9297, L2 Loss 0.0000\n",
      "Epoch 138, Loss 97.2862, TD-Loss 33.1296, NTD-Loss 47.3384, Margin Loss 16.8182, L2 Loss 0.0000\n",
      "Epoch 139, Loss 55.1293, TD-Loss 13.5289, NTD-Loss 32.3191, Margin Loss 9.2812, L2 Loss 0.0000\n",
      "Epoch 140, Loss 67.0603, TD-Loss 24.3943, NTD-Loss 33.2403, Margin Loss 9.4258, L2 Loss 0.0000\n",
      "Epoch 141, Loss 97.4895, TD-Loss 44.5234, NTD-Loss 40.5204, Margin Loss 12.4458, L2 Loss 0.0000\n",
      "Epoch 142, Loss 54.3351, TD-Loss 14.2247, NTD-Loss 29.3147, Margin Loss 10.7957, L2 Loss 0.0000\n",
      "Epoch 143, Loss 70.9175, TD-Loss 29.6464, NTD-Loss 31.6118, Margin Loss 9.6594, L2 Loss 0.0000\n",
      "Epoch 144, Loss 50.0863, TD-Loss 15.6435, NTD-Loss 27.6705, Margin Loss 6.7723, L2 Loss 0.0000\n",
      "Epoch 145, Loss 62.5074, TD-Loss 25.6145, NTD-Loss 30.0842, Margin Loss 6.8087, L2 Loss 0.0000\n",
      "Epoch 146, Loss 49.9686, TD-Loss 17.0361, NTD-Loss 32.1912, Margin Loss 0.7413, L2 Loss 0.0000\n",
      "Epoch 147, Loss 42.3994, TD-Loss 7.1715, NTD-Loss 27.2971, Margin Loss 7.9308, L2 Loss 0.0000\n",
      "Epoch 148, Loss 30.3081, TD-Loss 13.1343, NTD-Loss 19.3856, Margin Loss -2.2118, L2 Loss 0.0000\n",
      "Epoch 149, Loss 42.5498, TD-Loss 10.0314, NTD-Loss 21.1014, Margin Loss 11.4171, L2 Loss 0.0000\n"
     ]
    }
   ],
   "source": [
    "n_epochs = config['epochs']\n",
    "n_batches_per_epoch = config['batches_per_epoch']\n",
    "batch_size = config['batch_size']\n",
    "index_pool = np.arange(len(_states))\n",
    "\n",
    "history = {}\n",
    "loggables = [\"loss\", \"td-loss\", \"ntd-loss\", \"margin-loss\", \"l2-loss\"]\n",
    "for loggable in loggables:\n",
    "    history[loggable + \"-mu\"] = np.zeros(n_epochs)\n",
    "    history[loggable + \"-std\"] = np.zeros(n_epochs)\n",
    "    \n",
    "for epoch in range(n_epochs):\n",
    "    \n",
    "    if epoch % config['update_freq'] == 0:\n",
    "        target_model.load_state_dict(online_model.state_dict())\n",
    "\n",
    "    \n",
    "    epoch_loss = []\n",
    "    epoch_td_loss, epoch_ntd_loss, epoch_margin_loss, epoch_l2_loss = [], [], [], []\n",
    "    for batch in range(n_batches_per_epoch):\n",
    "        \n",
    "        # Generate a batch of transitions from the data pool.\n",
    "        batch_indices = np.random.choice(index_pool, batch_size, replace=False)\n",
    "        b_states = utils.torchify_float(_states[batch_indices]).to(device='cuda:0')\n",
    "        b_actions = utils.torchify_long(_actions[batch_indices]).to(device='cuda:0')\n",
    "        b_next_states = utils.torchify_float(_next_states[batch_indices]).to(device='cuda:0')\n",
    "        b_nth_states = utils.torchify_float(_nth_states[batch_indices]).to(device='cuda:0')\n",
    "        b_rewards = utils.torchify_float(_rewards[batch_indices]).to(device='cuda:0')\n",
    "        b_discounted_rewards = utils.torchify_float(_discounted_rewards[batch_indices]).to(device='cuda:0')\n",
    "        b_dones = utils.torchify_float(_dones[batch_indices]).to(device='cuda:0')\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        loss, td_loss, ntd_loss, margin_loss, l2_loss = torch_dqfd_loss(\n",
    "            online_model=online_model,\n",
    "            target_model=target_model,\n",
    "            states=b_states,\n",
    "            next_states=b_next_states, nth_states=b_nth_states,\n",
    "            rewards=b_rewards, discounted_rewards=b_discounted_rewards,\n",
    "            dones=b_dones, gamma=config['gamma'], n=config['n_steps'],\n",
    "            coef1=config['coef1'], coef2=config['coef2'], coef3=config['coef3'],\n",
    "            margin=config['margin'], expert_actions=b_actions\n",
    "        )\n",
    "\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        epoch_loss.append(loss.detach().cpu().numpy())\n",
    "        epoch_td_loss.append(td_loss.detach().cpu().numpy())\n",
    "        epoch_ntd_loss.append(ntd_loss.detach().cpu().numpy())\n",
    "        epoch_margin_loss.append(margin_loss.detach().cpu().numpy())\n",
    "        epoch_l2_loss.append(l2_loss.detach().cpu().numpy())\n",
    "        \n",
    "    print(\"Epoch {0}, Loss {1:6.4f}, TD-Loss {2:6.4f}, NTD-Loss {3:6.4f}, Margin Loss {4:6.4f}, L2 Loss {5:6.4f}\".format(\n",
    "        epoch, np.mean(epoch_loss), np.mean(epoch_td_loss), \n",
    "        np.mean(epoch_ntd_loss), np.mean(epoch_margin_loss), np.mean(epoch_l2_loss))\n",
    "         )\n",
    "    \n",
    "    history[\"loss-mu\"][epoch] = np.mean(epoch_loss)\n",
    "    history[\"loss-std\"][epoch] = np.std(epoch_loss)\n",
    "    history[\"td-loss-mu\"][epoch] = np.mean(epoch_td_loss)\n",
    "    history[\"td-loss-std\"][epoch] = np.std(epoch_td_loss)\n",
    "    history[\"ntd-loss-mu\"][epoch] = np.mean(epoch_ntd_loss)\n",
    "    history[\"ntd-loss-std\"][epoch] = np.std(epoch_ntd_loss)\n",
    "    history[\"margin-loss-mu\"][epoch] = np.mean(epoch_margin_loss)\n",
    "    history[\"margin-loss-std\"][epoch] = np.std(epoch_margin_loss)\n",
    "    history[\"l2-loss-mu\"][epoch] = np.mean(epoch_l2_loss)\n",
    "    history[\"l2-loss-std\"][epoch] = np.std(epoch_l2_loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/serialization.py:360: UserWarning: Couldn't retrieve source code for container of type SonicNet. It won't be checked for correctness upon loading.\n",
      "  \"type \" + obj.__name__ + \". It won't be checked \"\n"
     ]
    }
   ],
   "source": [
    "torch.save(online_model, './dqfd_{}.pkl'.format(config['level']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Loss')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "steps = np.arange(n_epochs)\n",
    "plt.plot(steps, history[\"loss-mu\"])\n",
    "\n",
    "plt.fill_between(steps, history[\"loss-mu\"]-history[\"loss-std\"], \n",
    "                 history[\"loss-mu\"]+history[\"loss-std\"], alpha=0.2)\n",
    "plt.grid(alpha=0.35)\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fa4daf6d390>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for loggable in loggables:\n",
    "    plt.plot(steps, history[loggable + \"-mu\"], label=loggable)\n",
    "    plt.fill_between(steps, history[loggable + \"-mu\"] - history[loggable + \"-std\"],\n",
    "                     history[loggable + \"-mu\"] + history[loggable + \"-std\"],\n",
    "                     alpha=0.2\n",
    "                    )\n",
    "plt.grid(alpha=0.35)\n",
    "plt.ylim([-5, 250])\n",
    "plt.legend(frameon=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished game 0 with score      0.\n",
      "Finished game 1 with score      0.\n",
      "Finished game 2 with score      0.\n",
      "Finished game 3 with score    100.\n",
      "Finished game 4 with score      0.\n",
      "Finished game 5 with score    100.\n",
      "Finished game 6 with score      0.\n",
      "Finished game 7 with score      0.\n",
      "Finished game 8 with score      0.\n",
      "Finished game 9 with score      0.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.0, 0.0, 0.0, 100.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "env = retro.make('SonicTheHedgehog-Genesis', state=config['level'])\n",
    "utils.play_evaluation_games(env, online_model, \n",
    "                      state_transformer=utils.torchify_state, \n",
    "                      action_transformer=lambda x: utils.decoding_action_transformer(x, decoding),\n",
    "                      n_games=10, rnd_steps=50, max_frames=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collected 100 frames\n",
      "Collected 200 frames\n",
      "Collected 300 frames\n",
      "Collected 400 frames\n",
      "Collected 500 frames\n",
      "Collected 600 frames\n",
      "Collected 700 frames\n",
      "Collected 800 frames\n",
      "Collected 900 frames\n",
      "Collected 1000 frames\n",
      "Collected 1100 frames\n",
      "Collected 1200 frames\n",
      "Collected 1300 frames\n",
      "Collected 1400 frames\n",
      "Collected 1500 frames\n",
      "Collected 1600 frames\n",
      "Collected 1700 frames\n",
      "Collected 1800 frames\n",
      "Collected 1900 frames\n",
      "Collected 2000 frames\n",
      "Collected 2100 frames\n",
      "Collected 2200 frames\n",
      "Collected 2300 frames\n",
      "Collected 2400 frames\n",
      "Collected 2500 frames\n",
      "Collected 2600 frames\n",
      "Collected 2700 frames\n",
      "Collected 2800 frames\n",
      "Collected 2900 frames\n",
      "Collected 3000 frames\n",
      "Collected 3100 frames\n",
      "Collected 3200 frames\n",
      "Collected 3300 frames\n",
      "Collected 3400 frames\n",
      "Collected 3500 frames\n",
      "Collected 3600 frames\n",
      "Collected 3700 frames\n",
      "Collected 3800 frames\n",
      "Collected 3900 frames\n",
      "Collected 4000 frames\n",
      "Collected 4100 frames\n",
      "Collected 4200 frames\n",
      "Collected 4300 frames\n",
      "Collected 4400 frames\n",
      "Collected 4500 frames\n",
      "Collected 4600 frames\n",
      "Collected 4700 frames\n",
      "Collected 4800 frames\n",
      "Collected 4900 frames\n",
      "Collected 5000 frames\n"
     ]
    }
   ],
   "source": [
    "frames = utils.record_imitation_game(env=env, model=online_model, \n",
    "                               action_transformer=lambda x: utils.decoding_action_transformer(x, decoding),\n",
    "                               state_transformer=utils.torchify_state,\n",
    "                               rnd_steps=50, max_frames=5000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "imageio.mimwrite(\n",
    "    \"torch_dqfd_agent_{}.mp4\".format(config[\"level\"]), \n",
    "    frames, fps=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "class PrioritizedReplayBuffer:\n",
    "    \n",
    "    \"\"\" Prioritized replay buffer following the RL-Adventure example\n",
    "    and the paper but written in my own style. \"\"\"\n",
    "    \n",
    "    def __init__(self, maxsize, alpha=0.6):\n",
    "        self.maxsize = maxsize\n",
    "        self.alpha = alpha\n",
    "        self.priorities, self.buffer = [], []\n",
    "        self.last_batch_indices = None\n",
    "        \n",
    "    def add(self, transition):\n",
    "        \"\"\" Add to the buffer and ensure that it is \n",
    "        not too full. \"\"\"\n",
    "\n",
    "        max_prio = np.max(self.priorities) if self.buffer else 1.0\n",
    "        \n",
    "        self.buffer.append(transition)\n",
    "        self.priorities.append(max_prio)\n",
    "        \n",
    "        if len(self.buffer) > self.maxsize:\n",
    "            self.buffer.pop(0)\n",
    "            self.priorities.pop(0)\n",
    "            \n",
    "            \n",
    "    def sample(self, batch_size, beta=0.4):\n",
    "        \"\"\" Get a batch of transitions. \"\"\"\n",
    "        probs = np.array(self.priorities) ** self.alpha\n",
    "        probs /= np.sum(probs)\n",
    "        self.last_batch_indices = np.random.choice(np.arange(len(self.buffer)), batch_size, p=probs)\n",
    "        total = len(self.buffer)\n",
    "        return [(self.buffer[idx], (probs[idx] * total) ** -beta) for idx in self.last_batch_indices]\n",
    "\n",
    "\n",
    "    def update_priorities(self, prios):\n",
    "        if self.last_batch_indices is not None:\n",
    "            for index, prio in zip(self.last_batch_indices, prios):\n",
    "                self.priorities[index] = prio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import namedtuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "Transition = namedtuple('Transition', 'state action next_state nth_state reward discounted_reward done')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_to_transition(states, actions, next_states, nth_states, rewards, discounted_rewards, dones):\n",
    "    \"\"\" Convert lists of state-actions to transitions. \"\"\"\n",
    "    \n",
    "    transitions = []\n",
    "    for index in range(len(states)):\n",
    "        transition = Transition(\n",
    "            state=states[index], action=actions[index], next_state=next_states[index],\n",
    "            nth_state=nth_states[index], reward=rewards[index], discounted_reward=discounted_rewards[index],\n",
    "            done=dones[index]\n",
    "        )\n",
    "        transitions.append(transition)\n",
    "        \n",
    "    return transitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "transitions = convert_to_transition(\n",
    "    states=_states, actions=_actions, next_states=_next_states,\n",
    "    nth_states=_nth_states, rewards=_rewards, discounted_rewards=_discounted_rewards,\n",
    "    dones=_dones\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "buffer = PrioritizedReplayBuffer(maxsize=4000, alpha=0.6)\n",
    "\n",
    "for transition in transitions:\n",
    "    buffer.add(transition)\n",
    "    \n",
    "del transitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "long_it = lambda x: utils.torchify_long(x).to(device='cuda:0')\n",
    "float_it = lambda x: utils.torchify_float(x).to(device='cuda:0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "def torch_weighted_td_loss(online_model, target_model, states, actions, \n",
    "                  next_states, rewards, dones, weights, gamma=0.99):\n",
    "    \"\"\" Compute the weighted TD-error using pytorch for a set of transitions.  Return\n",
    "        the full loss so that we can calculate the priorities.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Predict the value of the current and next state using the \n",
    "    # online and target networks respectively. \n",
    "    q_values = online_model(states)\n",
    "    next_q_values = target_model(next_states)\n",
    "    \n",
    "    # Mask those states for which the next state is terminal.\n",
    "    q_values = q_values.gather(1, actions.view(-1,1)).squeeze(1)\n",
    "    next_q_values = next_q_values.max(1).values\n",
    "\n",
    "    qhat = (rewards + gamma * next_q_values * (1 - dones))\n",
    "    loss = (q_values - qhat.detach()).pow(2) * weights\n",
    "    return loss\n",
    "\n",
    "\n",
    "def torch_dqfd_loss(online_model, target_model, states, next_states, nth_states, \n",
    "                    rewards, discounted_rewards, dones, weights, gamma, n, coef1, coef2, coef3,\n",
    "                    margin, expert_actions\n",
    "                   ):\n",
    "    \"\"\" Construct the full DQfD loss from the four component loss functions.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Predict which action to take from the online network.\n",
    "    q_values = online_model(states)\n",
    "    actions = torch.argmax(q_values, axis=1)\n",
    "    \n",
    "    td_loss = torch_weighted_td_loss(\n",
    "        online_model=online_model, \n",
    "        target_model=target_model, \n",
    "        actions=actions, states=states, \n",
    "        next_states=next_states, rewards=rewards,\n",
    "        weights=weights, dones=dones, gamma=gamma)\n",
    "    \n",
    "    ntd_loss = torch_nstep_td_loss(\n",
    "        online_model=online_model, target_model=target_model, \n",
    "        actions=actions, states=states, \n",
    "        nth_states=nth_states, \n",
    "        discounted_rewards=discounted_rewards, \n",
    "        dones=dones, gamma=gamma, n=n)\n",
    "    \n",
    "    q_values = online_model(states)\n",
    "    margin_loss = torch_margin_loss(q_values, expert_actions, margin)\n",
    "    margin_loss = torch.mean(margin_loss)\n",
    "    l2_loss = torch_l2_penalty(online_model.parameters())\n",
    "    \n",
    "    loss = td_loss + coef1 * ntd_loss + coef2 * margin_loss + coef3 * l2_loss\n",
    "    \n",
    "    return loss, td_loss, ntd_loss * coef1, margin_loss * coef2, l2_loss * coef3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0, Loss 77.9213, TD-Loss 72.5918, NTD-Loss 414.4525, Margin Loss 5.3295, L2 Loss 140.0266\n",
      "Epoch 1, Loss 42.4908, TD-Loss 41.9189, NTD-Loss 317.6017, Margin Loss 0.5719, L2 Loss 140.2154\n",
      "Epoch 2, Loss 51.6715, TD-Loss 57.6937, NTD-Loss 416.0159, Margin Loss -6.0222, L2 Loss 140.4142\n",
      "Epoch 3, Loss 33.8683, TD-Loss 40.9654, NTD-Loss 452.9874, Margin Loss -7.0971, L2 Loss 140.6258\n",
      "Epoch 4, Loss 48.3031, TD-Loss 44.9098, NTD-Loss 333.4506, Margin Loss 3.3933, L2 Loss 140.8139\n",
      "Epoch 5, Loss 39.8996, TD-Loss 41.0615, NTD-Loss 359.1851, Margin Loss -1.1619, L2 Loss 141.0291\n",
      "Epoch 6, Loss 25.3763, TD-Loss 27.0527, NTD-Loss 185.3513, Margin Loss -1.6765, L2 Loss 141.2188\n",
      "Epoch 7, Loss 48.5994, TD-Loss 40.5410, NTD-Loss 309.3971, Margin Loss 8.0585, L2 Loss 141.3410\n",
      "Epoch 8, Loss 35.8887, TD-Loss 36.5595, NTD-Loss 261.8354, Margin Loss -0.6708, L2 Loss 141.4510\n",
      "Epoch 9, Loss 35.4558, TD-Loss 29.2495, NTD-Loss 371.0768, Margin Loss 6.2063, L2 Loss 141.5695\n",
      "Epoch 10, Loss 90.6507, TD-Loss 80.8484, NTD-Loss 223.9967, Margin Loss 9.8022, L2 Loss 141.6820\n",
      "Epoch 11, Loss 58.7399, TD-Loss 59.5387, NTD-Loss 249.4263, Margin Loss -0.7988, L2 Loss 141.9275\n",
      "Epoch 12, Loss 55.7202, TD-Loss 54.0177, NTD-Loss 542.1021, Margin Loss 1.7025, L2 Loss 142.1505\n",
      "Epoch 13, Loss 46.8858, TD-Loss 45.0423, NTD-Loss 428.4721, Margin Loss 1.8435, L2 Loss 142.3002\n",
      "Epoch 14, Loss 52.7738, TD-Loss 44.0083, NTD-Loss 305.7327, Margin Loss 8.7655, L2 Loss 142.4208\n",
      "Epoch 15, Loss 34.1087, TD-Loss 39.7607, NTD-Loss 253.2722, Margin Loss -5.6520, L2 Loss 142.5472\n",
      "Epoch 16, Loss 46.2012, TD-Loss 40.5433, NTD-Loss 466.1854, Margin Loss 5.6579, L2 Loss 142.6750\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-79-29a61ebf6815>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0mb_actions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlong_it\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb_actions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0mb_states\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfloat_it\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb_states\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m         \u001b[0mb_next_states\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfloat_it\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb_next_states\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0mb_nth_states\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfloat_it\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb_nth_states\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0mb_rewards\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfloat_it\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb_rewards\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-71-243702925e45>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mlong_it\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtorchify_long\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'cuda:0'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mfloat_it\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtorchify_float\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'cuda:0'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/rlmp/sonic/sonic/utils.py\u001b[0m in \u001b[0;36mtorchify_float\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m    159\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mtorchify_float\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    160\u001b[0m     \u001b[0;34m\"\"\" Convert x from numpy array to torch.FloatTensor. \"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 161\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mautograd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVariable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFloatTensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "online_model = online_model.to(device='cuda:0')\n",
    "target_model = target_model.to(device='cuda:0')\n",
    "target_model.load_state_dict(online_model.state_dict())\n",
    "optimizer = optim.Adam(online_model.parameters(), lr=1e-4)\n",
    "\n",
    "history = {}\n",
    "loggables = [\"loss\", \"td-loss\", \"ntd-loss\", \"margin-loss\", \"l2-loss\"]\n",
    "for loggable in loggables:\n",
    "    history[loggable + \"-mu\"] = np.zeros(n_epochs)\n",
    "    history[loggable + \"-std\"] = np.zeros(n_epochs)\n",
    "    \n",
    "for epoch in range(n_epochs):\n",
    "    \n",
    "    if epoch % config['update_freq'] == 0:\n",
    "        target_model.load_state_dict(online_model.state_dict())\n",
    "    \n",
    "    epoch_loss = []\n",
    "    epoch_td_loss, epoch_ntd_loss, epoch_margin_loss, epoch_l2_loss = [], [], [], []\n",
    "    for batch in range(n_batches_per_epoch):\n",
    "        \n",
    "        # Generate a batch of transitions from the buffer.\n",
    "        b_actions, b_states, b_next_states = [], [], []\n",
    "        b_nth_states, b_rewards, b_discounted_rewards = [], [], []\n",
    "        b_dones, b_weights = [], []\n",
    "        for transition, weight in buffer.sample(batch_size):\n",
    "            b_actions.append(transition.action)\n",
    "            b_states.append(transition.state)\n",
    "            b_next_states.append(transition.next_state)\n",
    "            b_nth_states.append(transition.nth_state)\n",
    "            b_rewards.append(transition.reward)\n",
    "            b_discounted_rewards.append(transition.discounted_reward)\n",
    "            b_dones.append(transition.done)\n",
    "            b_weights.append(weight)\n",
    "        \n",
    "        # Cast the transition components to torch tensors.\n",
    "        b_actions = long_it(b_actions)\n",
    "        b_states = float_it(b_states)\n",
    "        b_next_states = float_it(b_next_states)\n",
    "        b_nth_states = float_it(b_nth_states)\n",
    "        b_rewards = float_it(b_rewards)\n",
    "        b_discounted_rewards = float_it(b_discounted_rewards)\n",
    "        b_dones = float_it(b_dones)\n",
    "        b_weights = float_it(b_weights)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        q_values = online_model(b_states)\n",
    "        actions = torch.argmax(q_values, axis=1)\n",
    "    \n",
    "        td_loss = torch_weighted_td_loss(\n",
    "            online_model=online_model, \n",
    "            target_model=target_model, \n",
    "            actions=b_actions, states=b_states, \n",
    "            next_states=b_next_states, rewards=b_rewards,\n",
    "            weights=b_weights, dones=b_dones, gamma=config['gamma'])\n",
    "        \n",
    "        td_error = td_loss.detach().cpu().numpy() + 1e-5\n",
    "        buffer.update_priorities(td_error)\n",
    "        td_loss = torch.mean(td_loss)\n",
    "        \n",
    "        ntd_loss = torch_nstep_td_loss(\n",
    "            online_model=online_model, target_model=target_model, \n",
    "            actions=b_actions, states=b_states, \n",
    "            nth_states=b_nth_states, \n",
    "            discounted_rewards=b_discounted_rewards, \n",
    "            dones=b_dones, gamma=config['gamma'], n=config['n_steps'])\n",
    "\n",
    "        q_values = online_model(b_states)\n",
    "        margin_loss = torch_margin_loss(q_values, b_actions, config['margin'])\n",
    "        margin_loss = torch.mean(margin_loss)\n",
    "        l2_loss = torch_l2_penalty(online_model.parameters())\n",
    "\n",
    "        loss = td_loss + config['coef1'] * ntd_loss + config['coef2'] * margin_loss + config['coef3'] * l2_loss\n",
    "\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        epoch_loss.append(loss.detach().cpu().numpy())\n",
    "        epoch_td_loss.append(td_loss.detach().cpu().numpy())\n",
    "        epoch_ntd_loss.append(ntd_loss.detach().cpu().numpy())\n",
    "        epoch_margin_loss.append(margin_loss.detach().cpu().numpy())\n",
    "        epoch_l2_loss.append(l2_loss.detach().cpu().numpy())\n",
    "        \n",
    "    print(\"Epoch {0}, Loss {1:6.4f}, TD-Loss {2:6.4f}, NTD-Loss {3:6.4f}, Margin Loss {4:6.4f}, L2 Loss {5:6.4f}\".format(\n",
    "        epoch, np.mean(epoch_loss), np.mean(epoch_td_loss), \n",
    "        np.mean(epoch_ntd_loss), np.mean(epoch_margin_loss), np.mean(epoch_l2_loss))\n",
    "         )\n",
    "    \n",
    "    history[\"loss-mu\"][epoch] = np.mean(epoch_loss)\n",
    "    history[\"loss-std\"][epoch] = np.std(epoch_loss)\n",
    "    history[\"td-loss-mu\"][epoch] = np.mean(epoch_td_loss)\n",
    "    history[\"td-loss-std\"][epoch] = np.std(epoch_td_loss)\n",
    "    history[\"ntd-loss-mu\"][epoch] = np.mean(epoch_ntd_loss)\n",
    "    history[\"ntd-loss-std\"][epoch] = np.std(epoch_ntd_loss)\n",
    "    history[\"margin-loss-mu\"][epoch] = np.mean(epoch_margin_loss)\n",
    "    history[\"margin-loss-std\"][epoch] = np.std(epoch_margin_loss)\n",
    "    history[\"l2-loss-mu\"][epoch] = np.mean(epoch_l2_loss)\n",
    "    history[\"l2-loss-std\"][epoch] = np.std(epoch_l2_loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Environment (conda_pytorch_p36)",
   "language": "python",
   "name": "conda_pytorch_p36"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
